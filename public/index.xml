<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Using Databases in R</title>
    <link>/</link>
    <description>Recent content on Using Databases in R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DBI</title>
      <link>/dbi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/dbi/</guid>
      <description>Start by first connecting to the database, Drivers section describes how to accomplish that.
List tables dbListTables(con) ## [1] &amp;quot;airlines&amp;quot; &amp;quot;airport&amp;quot; &amp;quot;airports&amp;quot; &amp;quot;faithful&amp;quot; &amp;quot;flights&amp;quot; &amp;quot;iris&amp;quot;  Upload data to the database library(nycflights13) data(package = &amp;quot;nycflights13&amp;quot;) dbWriteTable(con, &amp;quot;airlines&amp;quot;, airlines)  List Fields dbListFields(con, &amp;quot;iris&amp;quot;) ## [1] &amp;quot;Sepal.Length&amp;quot; &amp;quot;Sepal.Width&amp;quot; &amp;quot;Petal.Length&amp;quot; &amp;quot;Petal.Width&amp;quot; ## [5] &amp;quot;Species&amp;quot;  Run a query Using the appropriate SQL syntax for the type of connection, you can use the dbGetQuery run queries.</description>
    </item>
    
    <item>
      <title>Databases &amp; dplyr</title>
      <link>/dplyr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/dplyr/</guid>
      <description>After connecting R to a database, we have to tackle the challenge manipulating data using two languages, R and SQL.
The dplyr package simplifies data wrangling of in-memory data in R, and is also able to do this with remote databases when used in combination with the dbplyr package.
In the background, the dbplyr package translates the dplyr commands into SQL commands, thus allowing us to start and end a data analysis using R code only!</description>
    </item>
    
    <item>
      <title>Open Source Packages</title>
      <link>/open-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/open-source/</guid>
      <description>DBI Compliant Packages      RSQLite - Embeds the ‘SQLite’ database engine in R and provides an interface compliant with the ‘DBI’ package. The source for the ‘SQLite’ engine (version 3.8.8.2) is included.   RMySQL - Implements ‘DBI’ Interface to ‘MySQL’ and ‘MariaDB’ Databases.   RPostgreSQL Database interface and PostgreSQL driver for R This package provides a Database Interface (DBI) compliant driver for R to access PostgreSQL database systems.</description>
    </item>
    
    <item>
      <title>RStudio Drivers</title>
      <link>/drivers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/drivers/</guid>
      <description>Install RStudio’s ODBC drivers The odbc-install repository has a script that simplifies the installation of the ODBC drivers in the client machine.
Red Hat Enterprise Linux/CentOS Linux (6.0+) There are two system dependencies that need to be installed prior to installing the drivers
sudo yum install wget sudo yum install unixODBC The following script will download and install the drivers:
# Placeholder path wget -O - https://s3-us-west-2.amazonaws.com/rstudio-odbc/...   Connecting to a Database using the odbc package The odbc package provides a DBI-compliant interface to ODBC drivers.</description>
    </item>
    
    <item>
      <title>Securing Credentials using the keyring package</title>
      <link>/keyring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/keyring/</guid>
      <description>The keyring package enables us to access the operating system’s credential store.
devtools::install_github(&amp;quot;gaborcsardi/keyring&amp;quot;) In this example, we will create a new key ring called rstudio.odbc and add a single key with the server path and credentials. Additional servers can be added to the same key ring by adding additional keys.
The way keyring retrieves data is by passing the Key Ring name and a service name. In this method, we will use the server path as the service so it will act as our key to retrieve user name and password to use for that particular server.</description>
    </item>
    
    <item>
      <title>Simplify connections using the config package</title>
      <link>/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/config/</guid>
      <description>The config package simplifies management of environment specific configuration values.
devtools::install_github(&amp;quot;rstudio/config&amp;quot;) The values are saved in a YAML file called config.yml. The package also allows R code to be used as values, we will use this capability to retrieve the credentials from Key Ring.
This is the YAML file used for this exercise:
 default: datawarehouse: server: &amp;quot;sol-eng-sqlserv.cihykudhzbgw.us-west-2.rds.amazonaws.com&amp;quot; uid: !expr keyring::key_list(&amp;quot;sol-eng-sqlserv.cihykudhzbgw.us-west-2.rds.amazonaws.com&amp;quot;, keyring = &amp;quot;rstudio.odbc&amp;quot;)[1,2] pwd: !expr keyring::key_get(&amp;quot;sol-eng-sqlserv.cihykudhzbgw.us-west-2.rds.amazonaws.com&amp;quot;, keyring = &amp;quot;rstudio.odbc&amp;quot;) database: &amp;quot;airontime&amp;quot; </description>
    </item>
    
    <item>
      <title>Untitled</title>
      <link>/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min.</description>
    </item>
    
    <item>
      <title>Using Databases in R</title>
      <link>/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/examples/</guid>
      <description>  We will review common scenarios that require database connectivity.
Simple example A simple example that covers all the steps for implementing a database data source in R.Simple example  
 </description>
    </item>
    
    <item>
      <title>Using Databases in R</title>
      <link>/examples/simple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/examples/simple/</guid>
      <description>Initial Setup Install RStudio’s ODBC drivers The odbc-install repository has a script that simplifies the installation of the ODBC drivers in the client machine.
Red Hat Enterprise Linux/CentOS Linux (6.0+) There are two system dependencies that need to be installed prior to installing the drivers
sudo yum install wget sudo yum install unixODBC The following script will download and install the drivers:
# Placeholder path wget -O - https://s3-us-west-2.amazonaws.com/rstudio-odbc/...   Securing Credentials using the keyring package The keyring package enables us to access the operating system’s credential store.</description>
    </item>
    
    <item>
      <title>Using Databases in R</title>
      <link>/index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/index/</guid>
      <description>
 Create and manage database connections
 Browse tables and columns from the RStudio IDE
 Preview the first 1,000 rows inside RStudio
 Push computation to the database and collect results in R
 Use RStudio commercial drivers or open source drivers
  </description>
    </item>
    
  </channel>
</rss>